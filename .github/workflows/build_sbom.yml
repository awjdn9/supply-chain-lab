# This workflow builds the Docker image, generates an SBOM, and signs the image.
# It now also includes a vulnerability scanning step using Grype.
name: Build, SBOM, Sign, and Scan

# Trigger the workflow on push events to the main branch
on:
  push:
    branches:
      - main

jobs:
  build-sbom-sign-scan: # Renamed the job for clarity
    runs-on: ubuntu-latest

    permissions:
      contents: read # Allow reading repository contents
      packages: write # Allow writing to GitHub Packages (for image push)
      id-token: write # Allow OpenID Connect (OIDC) token issuance for Sigstore
      # Add permission to write security events for SARIF report upload
      security-events: write

    steps:
    - name: Checkout code
      # Action to check out your repository code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      # Action to set up Buildx, a Docker component for building images
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      # Log in to the GitHub Container Registry where we will push the image
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Push Docker Image
      # Build and immediately push the tagged image to GitHub Container Registry
      id: build-image # Give this step an ID to reference its outputs
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true # Push the image to the registry
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}

    - name: Install Cosign
      # Install the Cosign tool
      uses: sigstore/cosign-installer@v3.5.0
      with:
        cosign-release: 'v2.2.3' # Specify a Cosign version

    - name: Sign the Container Image with Cosign
      # Use keyless signing (no need to manage keys manually)
      # The COSIGN_EXPERIMENTAL environment variable is needed for keyless signing in some versions
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |
        cosign sign --yes ghcr.io/${{ github.repository }}@${{ steps.build-image.outputs.digest }} # Added --yes flag

    - name: Pull Docker Image for Analysis
      # Explicitly pull the image using the authenticated Docker daemon on the runner
      # This ensures the image is available locally for Syft to analyze
      run: docker pull ghcr.io/${{ github.repository }}@${{ steps.build-image.outputs.digest }}

    - name: Generate SBOM with Syft
      # Run Syft as a Docker container to analyze our image
      # Mount the Docker socket to allow Syft access to the daemon
      # Mount the workspace to save the SBOM file to the runner's filesystem
      # Analyze the image and output SBOM to a file in the mounted workspace
      run: |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v ${{ github.workspace }}:/workspace \
          anchore/syft:latest \
          ghcr.io/${{ github.repository }}@${{ steps.build-image.outputs.digest }} \
          -o cyclonedx-json=/workspace/sbom.json # Output to file in the mounted workspace

    - name: Run Vulnerability Scan with Grype
      # Run Grype as a Docker container to scan the SBOM file
      # Mount the workspace to access the sbom.json file and save the report
      # Output the report in SARIF format for GitHub Advanced Security integration
      run: |
        docker run --rm \
          -v ${{ github.workspace }}:/workspace \
          anchore/grype:latest \
          sbom:/workspace/sbom.json \
          -o sarif=/workspace/vulnerability-report.sarif # Scan the SBOM file and output SARIF report

    - name: Upload SARIF report
      # Upload the SARIF vulnerability report to GitHub Advanced Security
      # This requires the 'security-events: write' permission
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: vulnerability-report.sarif

    - name: Upload Vulnerability Report artifact (Optional - for raw report)
      # Upload the raw vulnerability report file as a workflow artifact
      # This allows you to download and review the report directly
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report
        path: vulnerability-report.sarif # Or .json if you change the output format above
